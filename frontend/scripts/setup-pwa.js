// scripts/setup-pwa.js
const fs = require('fs');
const path = require('path');

console.log('üöÄ TravelSense PWA Setup Script\n');

async function setupPWA() {
  console.log('üìÅ T·∫°o c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt...');
  
  // T·∫°o th∆∞ m·ª•c public/icons n·∫øu ch∆∞a c√≥
  const iconsDir = path.join(process.cwd(), 'public', 'icons');
  if (!fs.existsSync(iconsDir)) {
    fs.mkdirSync(iconsDir, { recursive: true });
    console.log('‚úÖ ƒê√£ t·∫°o th∆∞ m·ª•c public/icons');
  }

  // T·∫°o th∆∞ m·ª•c components n·∫øu ch∆∞a c√≥
  const componentsDir = path.join(process.cwd(), 'app', 'components');
  if (!fs.existsSync(componentsDir)) {
    fs.mkdirSync(componentsDir, { recursive: true });
    console.log('‚úÖ ƒê√£ t·∫°o th∆∞ m·ª•c app/components');
  }

  console.log('\nüìù T·∫°o c√°c file PWA...');

  // 1. T·∫°o manifest.json
  const manifest = {
    "name": "TravelSense - Kh√°m ph√° ƒë·ªãa ƒëi·ªÉm tuy·ªát v·ªùi",
    "short_name": "TravelSense",
    "description": "N·ªÅn t·∫£ng du l·ªãch th√¥ng minh gi√∫p b·∫°n kh√°m ph√° nh·ªØng ƒë·ªãa ƒëi·ªÉm tuy·ªát v·ªùi xung quanh b·∫°n.",
    "start_url": "/",
    "display": "standalone",
    "background_color": "#ffffff",
    "theme_color": "#3b82f6",
    "orientation": "portrait-primary",
    "scope": "/",
    "lang": "vi",
    "categories": ["travel", "navigation", "lifestyle"],
    "icons": [
      {
        "src": "/icons/icon-72x72.png",
        "sizes": "72x72",
        "type": "image/png",
        "purpose": "maskable any"
      },
      {
        "src": "/icons/icon-96x96.png",
        "sizes": "96x96",
        "type": "image/png",
        "purpose": "maskable any"
      },
      {
        "src": "/icons/icon-128x128.png",
        "sizes": "128x128",
        "type": "image/png",
        "purpose": "maskable any"
      },
      {
        "src": "/icons/icon-144x144.png",
        "sizes": "144x144",
        "type": "image/png",
        "purpose": "maskable any"
      },
      {
        "src": "/icons/icon-152x152.png",
        "sizes": "152x152",
        "type": "image/png",
        "purpose": "maskable any"
      },
      {
        "src": "/icons/icon-192x192.png",
        "sizes": "192x192",
        "type": "image/png",
        "purpose": "maskable any"
      },
      {
        "src": "/icons/icon-384x384.png",
        "sizes": "384x384",
        "type": "image/png",
        "purpose": "maskable any"
      },
      {
        "src": "/icons/icon-512x512.png",
        "sizes": "512x512",
        "type": "image/png",
        "purpose": "maskable any"
      }
    ],
    "shortcuts": [
      {
        "name": "Kh√°m ph√° b·∫£n ƒë·ªì",
        "short_name": "B·∫£n ƒë·ªì",
        "description": "Xem b·∫£n ƒë·ªì v√† t√¨m ki·∫øm ƒë·ªãa ƒëi·ªÉm",
        "url": "/dashboard/Map",
        "icons": [
          {
            "src": "/icons/map-shortcut.png",
            "sizes": "96x96"
          }
        ]
      },
      {
        "name": "L·∫≠p l·ªãch tr√¨nh",
        "short_name": "L·ªãch tr√¨nh", 
        "description": "T·∫°o v√† qu·∫£n l√Ω l·ªãch tr√¨nh du l·ªãch",
        "url": "/trip-planner",
        "icons": [
          {
            "src": "/icons/trip-shortcut.png",
            "sizes": "96x96"
          }
        ]
      }
    ]
  };

  fs.writeFileSync(
    path.join(process.cwd(), 'public', 'manifest.json'),
    JSON.stringify(manifest, null, 2)
  );
  console.log('‚úÖ ƒê√£ t·∫°o manifest.json');

  // 2. T·∫°o browserconfig.xml
  const browserConfig = `<?xml version="1.0" encoding="utf-8"?>
<browserconfig>
  <msapplication>
    <tile>
      <square150x150logo src="/icons/icon-144x144.png"/>
      <square310x310logo src="/icons/icon-384x384.png"/>
      <TileColor>#3b82f6</TileColor>
    </tile>
  </msapplication>
</browserconfig>`;

  fs.writeFileSync(
    path.join(process.cwd(), 'public', 'browserconfig.xml'),
    browserConfig
  );
  console.log('‚úÖ ƒê√£ t·∫°o browserconfig.xml');

  // 3. T·∫°o robots.txt
  const robotsTxt = `User-agent: *
Allow: /

Sitemap: https://507c-113-185-48-241.ngrok-free.app/sitemap.xml`;

  fs.writeFileSync(
    path.join(process.cwd(), 'public', 'robots.txt'),
    robotsTxt
  );
  console.log('‚úÖ ƒê√£ t·∫°o robots.txt');

  console.log('\nüé® T·∫°o icons placeholder...');
  
  // T·∫°o SVG icons ƒë∆°n gi·∫£n
  const createSVGIcon = (size) => `<svg width="${size}" height="${size}" viewBox="0 0 ${size} ${size}" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <linearGradient id="grad" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#3b82f6;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#1d4ed8;stop-opacity:1" />
    </linearGradient>
  </defs>
  <rect width="${size}" height="${size}" rx="${size * 0.2}" fill="url(#grad)"/>
  <path d="M${size * 0.25} ${size * 0.3} L${size * 0.75} ${size * 0.3} L${size * 0.6} ${size * 0.7} L${size * 0.4} ${size * 0.7} Z" fill="white"/>
  <circle cx="${size * 0.5}" cy="${size * 0.4}" r="${size * 0.08}" fill="white"/>
</svg>`;

  const sizes = [72, 96, 128, 144, 152, 192, 384, 512];
  sizes.forEach(size => {
    const svgContent = createSVGIcon(size);
    fs.writeFileSync(
      path.join(iconsDir, `icon-${size}x${size}.svg`),
      svgContent
    );
  });

  // T·∫°o favicon
  const faviconSVG = createSVGIcon(32);
  fs.writeFileSync(path.join(process.cwd(), 'public', 'favicon.svg'), faviconSVG);
  
  console.log('‚úÖ ƒê√£ t·∫°o placeholder icons');

  console.log('\n‚öôÔ∏è C·∫•u h√¨nh next.config.ts...');
  
  // ƒê·ªçc next.config.ts hi·ªán t·∫°i
  const nextConfigPath = path.join(process.cwd(), 'next.config.ts');
  let nextConfig = fs.readFileSync(nextConfigPath, 'utf8');
  
  // Th√™m headers cho PWA n·∫øu ch∆∞a c√≥
  if (!nextConfig.includes('X-Content-Type-Options')) {
    const headersConfig = `
  async headers() {
    return [
      {
        source: '/manifest.json',
        headers: [
          {
            key: 'Content-Type',
            value: 'application/manifest+json',
          },
        ],
      },
      {
        source: '/sw.js',
        headers: [
          {
            key: 'Content-Type',
            value: 'application/javascript',
          },
          {
            key: 'Service-Worker-Allowed',
            value: '/',
          },
        ],
      },
      {
        source: '/(.*)',
        headers: [
          {
            key: 'X-Content-Type-Options',
            value: 'nosniff',
          },
          {
            key: 'X-Frame-Options',
            value: 'DENY',
          },
          {
            key: 'X-XSS-Protection',
            value: '1; mode=block',
          },
        ],
      },
    ];
  },`;

    nextConfig = nextConfig.replace(
      'const nextConfig: NextConfig = {',
      `const nextConfig: NextConfig = {${headersConfig}`
    );
    
    fs.writeFileSync(nextConfigPath, nextConfig);
    console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t next.config.ts');
  }

  console.log('\nüì± C√°ch test PWA:');
  console.log('1. Ch·∫°y: npm run build && npm run start');
  console.log('2. M·ªü Chrome DevTools > Application > Manifest');
  console.log('3. Ki·ªÉm tra Service Workers tab');
  console.log('4. Test tr√™n mobile b·∫±ng ngrok URL');
  console.log('5. Th·ª≠ c√†i ƒë·∫∑t app t·ª´ Chrome menu');

  console.log('\nüåê ƒê·ªÉ deploy l√™n production:');
  console.log('1. C·∫≠p nh·∫≠t NEXT_PUBLIC_APP_URL trong .env');
  console.log('2. Thay ƒë·ªïi start_url trong manifest.json');
  console.log('3. T·∫°o icons PNG th·∫≠t t·ª´ SVG (d√πng sharp ho·∫∑c online tools)');
  console.log('4. Test PWA score tr√™n Lighthouse');

  console.log('\n‚úÖ PWA setup ho√†n th√†nh!');
  console.log('üìù Nh·ªõ:');
  console.log('- Thay th·∫ø SVG icons b·∫±ng PNG icons th·∫≠t');
  console.log('- Test tr√™n HTTPS (ngrok URL ok)');
  console.log('- Ki·ªÉm tra manifest.json v√† service worker');
  console.log('- Test offline functionality');
}

// Export function ƒë·ªÉ c√≥ th·ªÉ import t·ª´ n∆°i kh√°c
module.exports = { setupPWA };

// Ch·∫°y script n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
  setupPWA().catch(console.error);
}