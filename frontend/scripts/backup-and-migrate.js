// scripts/backup-and-migrate.js
const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

async function backupAndMigrate() {
  console.log('üóÑÔ∏è TravelSense Database Migration Tool\n');

  try {
    // 1. Get local database info
    console.log('üìã B∆Ø·ªöC 1: Th√¥ng tin database local');
    const localHost = await question('Local host (localhost): ') || 'localhost';
    const localPort = await question('Local port (5432): ') || '5432';
    const localUser = await question('Local username (postgres): ') || 'postgres';
    const localDb = await question('Local database name: ');
    
    if (!localDb) {
      console.log('‚ùå C·∫ßn nh·∫≠p t√™n database!');
      process.exit(1);
    }

    // 2. Test local connection
    console.log('\nüîç B∆Ø·ªöC 2: Ki·ªÉm tra k·∫øt n·ªëi local...');
    try {
      execSync(`psql -h ${localHost} -p ${localPort} -U ${localUser} -d ${localDb} -c "SELECT version();"`, { stdio: 'ignore' });
      console.log('‚úÖ K·∫øt n·ªëi local database th√†nh c√¥ng!');
    } catch (error) {
      console.log('‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi local database. Ki·ªÉm tra:');
      console.log('   - PostgreSQL ƒëang ch·∫°y?');
      console.log('   - Username/password ƒë√∫ng?');
      console.log('   - Database t·ªìn t·∫°i?');
      process.exit(1);
    }

    // 3. Backup local database
    console.log('\nüì¶ B∆Ø·ªöC 3: Backup database local...');
    const backupFile = `backup_${Date.now()}.sql`;
    const backupPath = path.join(process.cwd(), backupFile);
    
    try {
      console.log(`   ƒêang backup v√†o ${backupFile}...`);
      execSync(`pg_dump -h ${localHost} -p ${localPort} -U ${localUser} -d ${localDb} > ${backupFile}`, { stdio: 'inherit' });
      
      const backupSize = fs.statSync(backupPath).size;
      console.log(`‚úÖ Backup th√†nh c√¥ng! K√≠ch th∆∞·ªõc: ${(backupSize / 1024).toFixed(2)} KB`);
      
      if (backupSize < 100) {
        console.log('‚ö†Ô∏è  C·∫£nh b√°o: Backup file nh·ªè, c√≥ th·ªÉ database tr·ªëng.');
      }
    } catch (error) {
      console.log('‚ùå L·ªói khi backup:', error.message);
      process.exit(1);
    }

    // 4. Get cloud database URL
    console.log('\n‚òÅÔ∏è B∆Ø·ªöC 4: Th√¥ng tin cloud database');
    console.log('   N·∫øu ch∆∞a c√≥, t·∫°o t·∫°i: https://neon.tech');
    const cloudUrl = await question('Cloud database URL: ');
    
    if (!cloudUrl) {
      console.log('‚ùå C·∫ßn nh·∫≠p cloud database URL!');
      console.log('üí° Format: postgresql://user:pass@host:port/dbname?sslmode=require');
      process.exit(1);
    }

    // 5. Test cloud connection
    console.log('\nüîç B∆Ø·ªöC 5: Ki·ªÉm tra k·∫øt n·ªëi cloud...');
    try {
      execSync(`psql "${cloudUrl}" -c "SELECT version();"`, { stdio: 'ignore' });
      console.log('‚úÖ K·∫øt n·ªëi cloud database th√†nh c√¥ng!');
    } catch (error) {
      console.log('‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi cloud database. Ki·ªÉm tra URL!');
      process.exit(1);
    }

    // 6. Setup schema using Prisma
    console.log('\nüèóÔ∏è B∆Ø·ªöC 6: Setup schema v·ªõi Prisma...');
    try {
      // Temporarily set cloud URL
      process.env.POSTGRES_URL = cloudUrl;
      
      console.log('   ƒêang t·∫°o schema...');
      execSync('npx prisma db push', { stdio: 'inherit' });
      
      console.log('   ƒêang generate Prisma client...');
      execSync('npx prisma generate', { stdio: 'ignore' });
      
      console.log('‚úÖ Schema ƒë√£ ƒë∆∞·ª£c t·∫°o!');
    } catch (error) {
      console.log('‚ùå L·ªói khi setup schema:', error.message);
      process.exit(1);
    }

    // 7. Migrate data
    console.log('\nüì• B∆Ø·ªöC 7: Migrate d·ªØ li·ªáu...');
    const shouldMigrateData = await question('Migrate d·ªØ li·ªáu t·ª´ backup? (y/n): ');
    
    if (shouldMigrateData.toLowerCase() === 'y') {
      try {
        console.log('   ƒêang restore d·ªØ li·ªáu...');
        execSync(`psql "${cloudUrl}" < ${backupFile}`, { stdio: 'inherit' });
        console.log('‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c migrate!');
      } catch (error) {
        console.log('‚ö†Ô∏è  M·ªôt s·ªë l·ªói khi migrate d·ªØ li·ªáu (c√≥ th·ªÉ do conflict):');
        console.log('   B·∫°n c√≥ th·ªÉ migrate th·ªß c√¥ng t·ª´ file:', backupFile);
      }
    }

    // 8. Create test user
    console.log('\nüë§ B∆Ø·ªöC 8: T·∫°o test user...');
    try {
      execSync('node scripts/create-test-user.js', { stdio: 'inherit' });
      console.log('‚úÖ Test user ƒë√£ ƒë∆∞·ª£c t·∫°o!');
    } catch (error) {
      console.log('‚ö†Ô∏è  Kh√¥ng th·ªÉ t·∫°o test user (c√≥ th·ªÉ ƒë√£ t·ªìn t·∫°i)');
    }

    // 9. Verify migration
    console.log('\n‚úÖ B∆Ø·ªöC 9: Ki·ªÉm tra migration...');
    try {
      const { PrismaClient } = require('@prisma/client');
      const prisma = new PrismaClient();
      
      const userCount = await prisma.user.count();
      const placeCount = await prisma.place.count();
      const tripCount = await prisma.trip.count();
      
      console.log(`   Users: ${userCount}`);
      console.log(`   Places: ${placeCount}`);
      console.log(`   Trips: ${tripCount}`);
      
      await prisma.$disconnect();
      console.log('‚úÖ Verification th√†nh c√¥ng!');
    } catch (error) {
      console.log('‚ö†Ô∏è  Kh√¥ng th·ªÉ verify (Prisma ch∆∞a ƒë∆∞·ª£c config)');
    }

    // 10. Setup environment
    console.log('\n‚öôÔ∏è B∆Ø·ªöC 10: Setup environment variables...');
    const envContent = `
# Cloud Database (Production)
POSTGRES_URL="${cloudUrl}"

# API Keys (th√™m n·∫øu c·∫ßn)
NEXT_PUBLIC_COORDINATES_SERVER_URL="https://your-api-server.com"
NEXT_PUBLIC_API_KEY="your-api-key"
`;

    fs.writeFileSync('.env.production', envContent);
    console.log('‚úÖ File .env.production ƒë√£ ƒë∆∞·ª£c t·∫°o!');

    // 11. Final instructions
    console.log('\nüéâ MIGRATION HO√ÄN TH√ÄNH!');
    console.log('\nüìù C√°c b∆∞·ªõc ti·∫øp theo:');
    console.log('1. ƒê·ªÉ deploy l√™n Vercel:');
    console.log('   vercel env add POSTGRES_URL');
    console.log(`   (paste: ${cloudUrl})`);
    console.log('   vercel --prod');
    console.log('\n2. File backup ƒë∆∞·ª£c l∆∞u t·∫°i:', backupFile);
    console.log('3. C√≥ th·ªÉ x√≥a file backup sau khi verify th√†nh c√¥ng');
    console.log('\n4. Test app local v·ªõi cloud DB:');
    console.log('   cp .env.production .env.local');
    console.log('   npm run dev');

  } catch (error) {
    console.error('\n‚ùå L·ªói kh√¥ng mong mu·ªën:', error.message);
  } finally {
    rl.close();
  }
}

// Run script
if (require.main === module) {
  backupAndMigrate();
}

module.exports = { backupAndMigrate };