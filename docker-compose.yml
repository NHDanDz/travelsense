# docker-compose.yml - Full stack setup
version: '3.8'

services:
  # Backend API (Python FastAPI)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: travelsense_backend
    ports:
      - "8089:8089"
    env_file:
      - ./backend/.env
    environment:
      - PORT=8089
      - HOST=0.0.0.0
    volumes:
      - ./backend/logs:/app/logs
      # Mount SQLite database if using SQLite
      - ./backend/DB.sqlite:/app/DB.sqlite
    extra_hosts:
      # Allow container to access host services
      - "host.docker.internal:host-gateway"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8089/docs"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - travelsense_network

  # Frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: travelsense_frontend
    ports:
      - "3000:3000"
    env_file:
      - ./frontend/.env
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:8089
      - PORT=3000
      - HOSTNAME=0.0.0.0
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - travelsense_network

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: travelsense_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/html:/usr/share/nginx/html:ro
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - travelsense_network

# Networks
networks:
  travelsense_network:
    driver: bridge

# Volumes for persistent data
volumes:
  backend_logs:
    driver: local
  sqlite_data:
    driver: local